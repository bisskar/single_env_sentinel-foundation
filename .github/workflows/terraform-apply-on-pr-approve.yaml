name: Terraform apply on PR merge
run-name: Terraform apply on merge, env=${{github.base_ref}}, PR='#${{ github.event.pull_request.number }}, ${{ github.triggering_actor }}
on:
  pull_request:
    types: [closed]
    branches: [main]

concurrency:
  group: state_lock_group
  cancel-in-progress: false
  
permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  deploy: 
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}

      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: '${{ secrets.AZURE_CLIENT_ID }}'
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: >
          terraform init
          -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}"
          -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}"
          -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"
          -backend-config="use_oidc=true"
          -backend-config="subscription_id=${{secrets.AZURE_SUBSCRIPTION_ID}}"
          -backend-config="tenant_id=${{secrets.AZURE_TENANT_ID}}"
          -backend-config="client_id=${{secrets.AZURE_CLIENT_ID}}"
          -backend-config="use_azuread_auth=true"
          -backend-config="key=tfstate"

      - name: Terraform plan
        id: plan   
        run: >
          terraform plan
          -var 'location=${{vars.VAR_LOCATION}}'
          -var 'subscription_name=${{vars.VAR_SUBSCRIPTION_NAME}}'
          -var 'law_name=${{vars.VAR_LAW_NAME}}'
          -no-color -out=tfplan


      - name: Terraform apply
        id: apply
        run: >
          terraform apply -auto-approve tfplan
          && echo "::set-output name=exitcode::$?"


      - name: Add comment on successful apply
        if: success() && steps.apply.outputs.exitcode == '0'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Terraform apply run on env=${{ github.base_ref == 'main' && 'prod' || github.base_ref }} successfully (exit code 0) ✅'
            })

      - name: Add comment on failed apply
        if: failure() && steps.apply.outputs.exitcode == '1'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Terraform apply failed (exit code 1) ❌'
            })
